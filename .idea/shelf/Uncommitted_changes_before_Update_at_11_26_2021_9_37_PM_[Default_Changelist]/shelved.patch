Index: src/main/Controllers/SharedBooking.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.collections.ObservableSet;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.input.MouseButton;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Callback;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.sql.*;\r\nimport java.time.LocalDate;\r\nimport java.util.Locale;\r\nimport java.util.Optional;\r\nimport java.util.ResourceBundle;\r\nimport java.util.TreeSet;\r\n\r\npublic class SharedBooking extends DBConnection implements Initializable {\r\n\r\n    public static final String REMOVEFROMCART = \"removefromcart\"; // key to let method know removing from cart\r\n    public static final String ADDTOCART = \"addtocart\"; // key to let method know adding to cart\r\n    public static final int ERROR = -1; // used for returning error\r\n    public static final int SUCCESS = 0; // used for returning success\r\n\r\n    // data retrieval keys\r\n    public static final int ROOMS_KEY = 333;\r\n    public static final int  CHECKIN_KEY = 666;\r\n    public static final int CHECKOUT_KEY = 999;\r\n    public static final int  CHILDREN_KEY = 1200;\r\n    public static final int ADULT_KEY = 1600;\r\n    public static final int LOGIN_KEY = 100;\r\n\r\n    @FXML private AnchorPane anchorPane;\r\n    @FXML private Text hNameTF;\r\n    @FXML private Text hAddressTF;\r\n    @FXML private Text hRatingTF;\r\n    @FXML private Text checkInTF;\r\n    @FXML private Text checkOutTF;\r\n    @FXML private Text infoT;\r\n    @FXML private Text loginoutTV;\r\n    @FXML private Text mainmenuTV;\r\n    @FXML private TextArea descriptionTF;\r\n    @FXML private TextField nameTF;\r\n    @FXML private TextField emailTF;\r\n    @FXML private DatePicker checkInDP;\r\n    @FXML private DatePicker checkOutDP;\r\n    @FXML private Button addRoomBtn;\r\n    @FXML private Button bookBtn;\r\n    @FXML private Button removeRoomBtn1;\r\n    @FXML private Button returnBtn;\r\n    // rooms available table\r\n    @FXML private TableView<Room> roomTV;\r\n    @FXML private TableColumn<Room, String> styleColumn;\r\n    @FXML private TableColumn<Room, String> availableColumn;\r\n    @FXML private TableColumn<Room, String> priceColumn;\r\n    // cart variables\r\n    @FXML private TableView<Room> cartTV;\r\n    @FXML private TableColumn<Room, String> style2Column;\r\n    @FXML private TableColumn<Room, String> amount2Column;\r\n    @FXML private TableColumn<Room, String> price2Column;\r\n\r\n    @FXML private ListView<String> amenitiesLV;\r\n    @FXML private ObservableList<Room> roomsList;\r\n    @FXML private ObservableList<Room> roomTypes;\r\n    @FXML private ObservableList<Room> cartList;\r\n    @FXML private ChoiceBox<String> roomCB;\r\n    @FXML private Spinner<Integer> adultS;\r\n    @FXML private Spinner<Integer> childrenS;\r\n    int userID;\r\n    private Hotels hotel;\r\n    private Reservation resData; // stores data received from login scene\r\n    private Reservation resSend; // data to be sent to login\r\n    private boolean recievedInfo; // boolean check if we received data from login\r\n    private boolean employeeCheck; // checks to see if employee logged in for extra functionality\r\n    LocalDate today = LocalDate.now();\r\n    LocalDate future = LocalDate.now().plusYears(1);\r\n    private Reservation getUserInput() {\r\n        Reservation reservation = new Reservation();\r\n        LocalDate checkin = checkInDP.getValue();\r\n        LocalDate checkout = checkOutDP.getValue();\r\n        int adults = adultS.getValue();\r\n        int children = childrenS.getValue();\r\n\r\n        if(checkin != null) {\r\n            reservation.setCheckIn(checkin);\r\n            reservation.addToCurrent(CHECKIN_KEY);\r\n        }\r\n        if(checkout != null) {\r\n            reservation.setCheckOut(checkout);\r\n            reservation.addToCurrent(CHECKOUT_KEY);\r\n        }\r\n        if(cartList.size() != 0){\r\n            reservation.setRooms(cartList);\r\n            reservation.addToCurrent(ROOMS_KEY);\r\n        }\r\n        if(adults > 0) {\r\n            reservation.setAdults(adults);\r\n            reservation.addToCurrent(ADULT_KEY);\r\n        }\r\n        if(children > 0) {\r\n            reservation.setChildren(children);\r\n            reservation.addToCurrent(CHILDREN_KEY);\r\n        }\r\n        return reservation;\r\n    }\r\n\r\n    @FXML void book(ActionEvent event) throws IOException, ClassNotFoundException, SQLException, NoSuchAlgorithmException {\r\n        Stage stage = (Stage) anchorPane.getScene().getWindow(); // for displaying Toast error messages\r\n        //Check to see if user is logged in\r\n        AnchorPane newScene = null;\r\n\r\n        if(LoadedUser.getInstance().getUser() == null) {\r\n\r\n            ButtonType loginAlertBtn = new ButtonType(\"Login\", ButtonBar.ButtonData.OK_DONE);\r\n            ButtonType cancelAlertBtn = new ButtonType(\"Cancel\", ButtonBar.ButtonData.CANCEL_CLOSE);\r\n            Alert alert = new Alert(Alert.AlertType.NONE,\"You are currently not logged in please do so to complete your reservation\", loginAlertBtn, cancelAlertBtn);\r\n            alert.setTitle(\"Booking Check\");\r\n            //alert.setContentText(\"Please confirm reservation deletion\");\r\n            Optional<ButtonType> result = alert.showAndWait();\r\n\r\n            // if user confirmed login go login\r\n            if(result.orElse(cancelAlertBtn) == loginAlertBtn){\r\n                resSend = getUserInput();\r\n                System.out.println(\"SharedBooking Scene -> Login Scene\");\r\n                System.out.println(\"NO USER LOGGED IN\");\r\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"login.fxml\"));\r\n                LoginController controller = new LoginController(hotel, resSend, LOGIN_KEY);\r\n                loader.setController(controller);\r\n                newScene = loader.load();\r\n                Scene scene = new Scene(newScene);\r\n                Stage window = (Stage)((Node) event.getSource()).getScene().getWindow();\r\n\r\n                window.setScene(scene);\r\n                window.show();\r\n            }\r\n        } else {\r\n            System.out.println(\"USER TYPE IS \"+ LoadedUser.getInstance().getUser().getType());\r\n            System.out.println(\"USER FIRSTNAME IS \" + LoadedUser.getInstance().getUser().getFirstName());\r\n            System.out.println(\"TESTING\");\r\n           // System.out.println(cartList.toString());\r\n          //  System.out.println(cartList.get(0).getType().toString());\r\n           // System.out.println(cartList.get(0).getAmountAvailable());\r\n\r\n//Requirements for booking a room\r\n// custID INT, HOTEL_ID INT, check_IN DATE, check_OUT DATE, Adults INT, Children INT, RoomType VARCHAR(40), QTY INT\r\n\r\n            Connection con = null;\r\n            con = getConnection();\r\n\r\n            if(LoadedUser.getInstance().getUser().getType().toString().equals(\"EMP\"))\r\n            {\r\n                System.out.println(\"USER IS A EMPLOYEE WHO IS MAKING THIS RESERVATION\");\r\n\r\n            }\r\n\r\n            System.out.println(hotel.getHotelId());//HOTEL_ID\r\n            System.out.println(checkInDP.getValue().toString());\r\n            System.out.println(checkOutDP.getValue().toString());\r\n            System.out.println(adultS.getValue().toString());//Adults\r\n            System.out.println(childrenS.getValue().toString());//Children\r\n            //CreateNewUser`(NEW_EMAIL VARCHAR(40), NEW_HASHED_PASSWORD CHAR(40), FNAME VARCHAR(40), USERTYPE VARCHAR(45))\r\n            CallableStatement CreateNew = con.prepareCall(\"{call hotel.CreateNewUser(?,?,?,?)}\");\r\n            String TempPW = Hasher.getInstance(\"SHA-256\").hash(emailTF.getText());\r\n            CreateNew.setString(1, emailTF.getText().toString());\r\n            CreateNew.setString(2,TempPW);\r\n            CreateNew.setString(3,nameTF.getText().toString());\r\n            CreateNew.setString(4,\"CUST\"); //<-will always be a customer from this scene\r\n            CreateNew.execute();\r\n\r\n\r\n            CallableStatement callableStatement = con.prepareCall(\"{call hotel.getID(?,?)}\");\r\n            callableStatement.setString(1,nameTF.getText().toString());\r\n            callableStatement.setString(2,\"CUST\");\r\n            ResultSet rs = callableStatement.executeQuery();\r\n            while(rs.next()){\r\n                userID = rs.getInt(\"ID\");\r\n            }\r\n\r\n\r\n            System.out.println(userID);//custID\r\n\r\n\r\n            for(int i = 0; i < cartList.size(); i++) {\r\n\r\n                CallableStatement BookStm = con.prepareCall(\"{call hotel.BookRooms(?,?,?,?,?,?,?,?)}\");\r\n                if(LoadedUser.getInstance().getUser().getType().toString().equals(\"EMP\")) {\r\n                    System.out.println(\"USER IS A EMPLOYEE WHO IS MAKING THIS RESERVATION\");\r\n                }\r\n                BookStm.setInt(1,userID);\r\n                BookStm.setInt(2,hotel.getHotelId());\r\n                BookStm.setDate(3, Date.valueOf(checkInDP.getValue()));\r\n                BookStm.setDate(4,Date.valueOf(checkOutDP.getValue()));\r\n                BookStm.setString(5,adultS.getValue().toString());\r\n                BookStm.setString(6,childrenS.getValue().toString());\r\n                BookStm.setString(7,cartList.get(i).getType().toString());\r\n                BookStm.setInt(8,cartList.get(i).getAmountAvailable());\r\n                BookStm.executeQuery();\r\n                    if(cartList.get(i).getAmountAvailable() == 0) {\r\n                    System.out.println(\"NO MORE IN CART\");\r\n                }\r\n            }\r\n\r\n            // retrieve dates from date pickers\r\n            LocalDate checkin = checkInDP.getValue();\r\n            LocalDate checkout = checkOutDP.getValue();\r\n            String customerName = nameTF.getText().toString();\r\n            String email = emailTF.getText().toString();\r\n\r\n            // date picker input validation\r\n            if(checkin == null || checkout == null) {\r\n                Toast.makeText(stage, \"Error: please select dates before trying to book\", 1500, 250, 250);\r\n                return;\r\n            } else if(checkin != null && checkout != null) {\r\n                if(checkin.isAfter(checkout)) {\r\n                    Toast.makeText(stage, \"Error: check in date cannot be after checkout\", 1500, 250, 250);\r\n                    return;\r\n                }\r\n            }\r\n            if(cartList.size() == 0) {\r\n                Toast.makeText(stage, \"Error: no rooms selects please to do to book\", 1500, 250, 250);\r\n                return;\r\n            }\r\n            if(employeeCheck) {\r\n                if(customerName.equals(\"\")) {\r\n                    Toast.makeText(stage, \"Error: please enter a customer name to book\", 1500, 250, 250);\r\n                    return;\r\n                }\r\n                if(email.equals(\"\")) {\r\n                    Toast.makeText(stage, \"Error: please enter a customer email to book\", 1500, 250, 250);\r\n                    return;\r\n                }\r\n            }\r\n\r\n\r\n// TODO: 11/17/2021 needs a query to actually write a reservation to the DB\r\n\r\n            // call scene change to return to the createResScene\r\n            sceneChange(event);\r\n        }\r\n    }\r\n\r\n    private void queryTotal() throws ClassNotFoundException, SQLException {\r\n// TODO: 11/18/2021 set up query for getting total cost\r\n        // this code could be helpful to manually calculate it\r\n        // https://stackoverflow.com/questions/4600034/calculate-number-of-weekdays-between-two-dates-in-java\r\n        Connection con = null;\r\n        con = getConnection();\r\n        CallableStatement callableStatement = con.prepareCall(\"{call hotel.CalculateTotalByDate(?,?,?,?)}\");\r\n        callableStatement.setDate(1, Date.valueOf(String.valueOf(checkInDP.getValue())));\r\n        callableStatement.setDate(2, Date.valueOf(String.valueOf(checkOutDP.getValue())));\r\n        callableStatement.setDouble(3, hotel.getPrice());\r\n        callableStatement.setInt(4, hotel.getHotelId());\r\n        ResultSet rs = callableStatement.executeQuery();\r\n        while(rs.next()) {\r\n            System.out.println(rs.getInt(\"total\"));\r\n        }\r\n        //loop through the resultSet & add each amenity to the ListView\r\n        while(rs.next()) {\r\n            amenitiesLV.getItems().add(rs.getString(\"Amenities_desc\"));\r\n        }\r\n    }\r\n\r\n    // constructor that takes in hotel to populate hotel data and account type for login\r\n    public SharedBooking(Hotels hotel) {\r\n        this.hotel = hotel;\r\n        this.resData = null;\r\n        this.recievedInfo = false;\r\n    }\r\n\r\n    // constructor for when the scene comes back after logging in to remember user data\r\n    public SharedBooking(Hotels hotel, Reservation resData) {\r\n        this.hotel = hotel;\r\n        this.resData = resData;\r\n        this.recievedInfo = true;\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n\r\n        if(LoadedUser.getInstance().getUser() != null) {\r\n            if(LoadedUser.getInstance().getUser().getType().equals(\"EMP\")) {\r\n                infoT.setVisible(true);\r\n                nameTF.setVisible(true);\r\n                emailTF.setVisible(true);\r\n                employeeCheck = true;\r\n            }\r\n            loginoutTV.setText(\"Logout\");\r\n        }\r\n\r\n        // initializes the cart TableView and observableArrayList\r\n        cartList = FXCollections.observableArrayList();\r\n        cartTV.setItems(cartList);\r\n\r\n        // makes it to where the ListView and TableView items are not clickable (front end)\r\n        amenitiesLV.setMouseTransparent(true);\r\n        amenitiesLV.setFocusTraversable(false);\r\n        cartTV.setMouseTransparent(true);\r\n        cartTV.setFocusTraversable(false);\r\n        roomTV.setMouseTransparent(true);\r\n        roomTV.setFocusTraversable(false);\r\n\r\n        // using Hotel data sent in through constructor we set text on hotel data elements\r\n        hNameTF.setText(this.hotel.getHotelname());\r\n        hAddressTF.setText(this.hotel.getHoteladdr());\r\n        hRatingTF.setText(String.valueOf(this.hotel.getRating()) + \"/10 Stars\");\r\n        descriptionTF.setText(hotel.getHoteldesc());\r\n\r\n        // set the columns up for the rooms available TableView\r\n        styleColumn.setCellValueFactory(new PropertyValueFactory<>(\"type\"));\r\n        availableColumn.setCellValueFactory(new PropertyValueFactory<>(\"amountAvailable\"));\r\n        priceColumn.setCellValueFactory(new PropertyValueFactory<>(\"price\"));\r\n\r\n        // set the columns up for the Cart TableView\r\n        style2Column.setCellValueFactory(new PropertyValueFactory<>(\"type\"));\r\n        amount2Column.setCellValueFactory(new PropertyValueFactory<>(\"amountAvailable\"));\r\n        price2Column.setCellValueFactory(new PropertyValueFactory<>(\"price\"));\r\n\r\n\r\n\r\n        checkInDP.setDayCellFactory(picker -> new DateCell() {\r\n            public void updateItem(LocalDate date, boolean empty) {\r\n                super.updateItem(date, empty);\r\n\r\n\r\n                setDisable(empty || date.compareTo(today) < 0 );\r\n            }\r\n        });\r\n\r\n\r\n        checkInDP.setValue(today);\r\n        checkOutDP.setValue(future);\r\n\r\n        // call the methods to initialize the amenities ListView & the Rooms TableView\r\n        try {\r\n            populateAmenitiesList();\r\n            populateRoomTable();\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        restrictDatePicker(checkInDP);\r\n        restrictDatePicker(checkOutDP);\r\n\r\n        if(recievedInfo) {\r\n            SpinnerValueFactory<Integer> valueFactoryC = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 50, resData.getChildren());\r\n            SpinnerValueFactory<Integer> valueFactoryA = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 50, resData.getChildren());\r\n            if(resData.dyanmicData.contains(CHECKIN_KEY))\r\n                checkInDP.setValue(resData.getCheckIn());\r\n            if(resData.dyanmicData.contains(CHECKOUT_KEY))\r\n                checkOutDP.setValue(resData.getCheckOut());\r\n            if(resData.dyanmicData.contains(CHILDREN_KEY)) {\r\n                childrenS.setValueFactory(valueFactoryC);\r\n            }\r\n            if(resData.dyanmicData.contains(ADULT_KEY)) {\r\n                adultS.setValueFactory(valueFactoryA);\r\n            }\r\n            if(resData.dyanmicData.contains(ROOMS_KEY)){\r\n                for(Room r : resData.getRooms()) {\r\n                    r.setPrice(r.getPrice() / r.getAmountAvailable());\r\n                    for(int i = 0; i < r.getAmountAvailable(); i++) {\r\n                        System.out.println(\"ADDING ITEM TO CART FROM RESDATA\");\r\n                        System.out.println(\"Items Price: \" + r.getPrice());\r\n                        cartHandler(r, ADDTOCART);\r\n                    }\r\n                }\r\n                cartTV.refresh();\r\n            } else {\r\n                Label label = new Label(\"Your cart is empty\");\r\n                label.setFont(new Font(\"Arial\", 20));\r\n                cartTV.setPlaceholder(label);\r\n            }\r\n        } else {\r\n            Label label = new Label(\"Your cart is empty\");\r\n            label.setFont(new Font(\"Arial\", 20));\r\n            cartTV.setPlaceholder(label);\r\n\r\n            // initialize spinners\r\n            SpinnerValueFactory<Integer> valueFactoryA = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 50, 0);\r\n            SpinnerValueFactory<Integer> valueFactoryC = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 50, 0);\r\n            adultS.setValueFactory(valueFactoryA);\r\n            childrenS.setValueFactory(valueFactoryC);\r\n        }\r\n    }\r\n\r\n    @FXML void topBar(MouseEvent event) {\r\n        AnchorPane newScene = null;\r\n        try {\r\n            if (event.getSource() == mainmenuTV) {\r\n                if (LoadedUser.getInstance().getUser() == null) {\r\n                    ButtonType loginAlertBtn = new ButtonType(\"Login\", ButtonBar.ButtonData.OK_DONE);\r\n                    ButtonType cancelAlertBtn = new ButtonType(\"Cancel\", ButtonBar.ButtonData.CANCEL_CLOSE);\r\n                    Alert alert = new Alert(Alert.AlertType.NONE, \"You are currently not logged in please do so to access the main menu options\", loginAlertBtn, cancelAlertBtn);\r\n                    alert.setTitle(\"No User Found\");\r\n                    //alert.setContentText(\"Please confirm reservation deletion\");\r\n                    Optional<ButtonType> result = alert.showAndWait();\r\n\r\n                    // if user confirmed login go login\r\n                    if (result.orElse(cancelAlertBtn) == loginAlertBtn) {\r\n                        System.out.println(\"Shared Booking Scene -> Login Scene\");\r\n                        System.out.println(\"NO USER LOGGED IN\");\r\n\r\n                        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"login.fxml\"));\r\n                        LoginController controller = new LoginController();\r\n                        loader.setController(controller);\r\n                        newScene = loader.load();\r\n                    } else {\r\n                        return;\r\n                    }\r\n                } else {\r\n                    if (LoadedUser.getInstance().getUser().getType().equals(\"EMP\")) {\r\n                        newScene = FXMLLoader.load(getClass().getResource(\"StaffMainMenu.fxml\"));\r\n                    } else {\r\n                        newScene = FXMLLoader.load(getClass().getResource(\"UserMainMenu.fxml\"));\r\n                    }\r\n                }\r\n            } else if(event.getSource() == loginoutTV) {\r\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"login.fxml\"));\r\n                resSend = getUserInput();\r\n                LoginController controller = new LoginController(hotel, resSend, LOGIN_KEY);\r\n                loader.setController(controller);\r\n                newScene = loader.load();\r\n            } else {\r\n                return;\r\n            }\r\n        } catch(IOException e){\r\n            e.printStackTrace();\r\n        }\r\n        Scene scene = new Scene(newScene);\r\n        Stage window = (Stage)((Node) event.getSource()).getScene().getWindow();\r\n        window.setScene(scene);\r\n        window.show();\r\n    }\r\n\r\n    @FXML void sceneChange(ActionEvent event) {\r\n        AnchorPane newScene = null;\r\n        try{\r\n            if(event.getSource() == returnBtn){\r\n                newScene = FXMLLoader.load(getClass().getResource(\"UserCreate.fxml\"));\r\n            } else if(event.getSource() == bookBtn) {\r\n                newScene = FXMLLoader.load(getClass().getResource(\"UserCreate.fxml\"));\r\n            }\r\n        }catch(IOException e){\r\n            e.printStackTrace();\r\n        }\r\n        Scene scene = new Scene(newScene);\r\n        Stage window = (Stage)((Node) event.getSource()).getScene().getWindow();\r\n        window.setScene(scene);\r\n        window.show();\r\n    }\r\n\r\n    EventHandler<MouseEvent> mouseClickedEventHandler = clickEvent -> {\r\n        if (clickEvent.getButton() == MouseButton.PRIMARY) {\r\n            try {\r\n                populateRoomTable();\r\n            } catch (ClassNotFoundException e) {\r\n                e.printStackTrace();\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        clickEvent.consume();\r\n    };\r\n\r\n    public void restrictDatePicker(DatePicker datePicker) {\r\n        datePicker.setDayCellFactory((DatePicker param) -> new DateCell() {\r\n                    @Override\r\n                    public void updateItem(LocalDate item, boolean empty) {\r\n                        super.updateItem(item, empty);\r\n                        if (item != null && !empty) {\r\n                            //...\r\n                            addEventHandler(MouseEvent.MOUSE_CLICKED, mouseClickedEventHandler);\r\n                        } else {\r\n                            //...\r\n                            removeEventHandler(MouseEvent.MOUSE_CLICKED, mouseClickedEventHandler);\r\n                        }\r\n                        if (item.isBefore(today)) {\r\n                            setDisable(true);\r\n                            setStyle(\"-fx-background-color: #FF4500;\");\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n\r\n\r\n        // queries DB for hotel amenities using hotel Id and adds each one to a ListView\r\n    public void populateAmenitiesList() throws ClassNotFoundException, SQLException {\r\n        Connection con = null;\r\n        con = getConnection();\r\n        CallableStatement callableStatement = con.prepareCall(\"{call getAmenitiesByHotel(?)}\");\r\n        callableStatement.setString(1, hotel.getHotelname());\r\n        ResultSet rs = callableStatement.executeQuery();\r\n\r\n        //loop through the resultSet & add each amenity to the ListView\r\n        while(rs.next()) {\r\n            amenitiesLV.getItems().add(rs.getString(\"Amenities_desc\"));\r\n        }\r\n    }\r\n\r\n    // calls getRoomTypes helper method to return a list of Rooms with only their string types being stored/known\r\n    // queries each room type to get the price and amount of each type of room that is available\r\n    public void populateRoomTable() throws ClassNotFoundException, SQLException {\r\n        Connection con = null;\r\n        con = getConnection();\r\n        CallableStatement callableStatement = con.prepareCall(\"{call hotel.getCountTypeAvailRooms(?, ?, ?, ?)}\");\r\n        callableStatement.setDate(3, Date.valueOf(checkInDP.getValue()));\r\n        callableStatement.setDate(4, Date.valueOf(checkOutDP.getValue()));\r\n        roomTypes = getRoomTypes();\r\n        ObservableList<String> typeStrings = FXCollections.observableArrayList();\r\n\r\n        for(Room r : roomTypes) {\r\n            System.out.println(r.getType() + \" \" + r.getAmountAvailable() + \" \" + r.getPrice());\r\n            typeStrings.add(r.getType());\r\n        }\r\n\r\n        roomCB.setItems(typeStrings); // set room types available for the choice box\r\n\r\n        for(int i = 0; i < roomTypes.size(); i++) {\r\n            callableStatement.setString(1, roomTypes.get(i).getType());\r\n            callableStatement.setInt(2, hotel.getHotelId());\r\n\r\n            ResultSet rs = callableStatement.executeQuery();\r\n\r\n            rs.next();\r\n            roomTypes.get(i).setAmountAvailable(rs.getInt(\"count\"));\r\n            roomTypes.get(i).setPrice(rs.getDouble(\"room_rate\"));\r\n        }\r\n        roomTV.setItems(roomTypes);\r\n    }\r\n\r\n    // helper method to populate room table. queries DB for a all the different room types using a hotel Id\r\n    // returns a ObservableList<Room>\r\n    public ObservableList<Room> getRoomTypes() throws ClassNotFoundException, SQLException {\r\n        ObservableList<Room> roomsTypes = FXCollections.observableArrayList();\r\n        Connection con = null;\r\n        con = getConnection();\r\n        CallableStatement callableStatement = con.prepareCall(\"{call hotel.getAllRoomTypes(?)}\");\r\n        callableStatement.setInt(1, hotel.getHotelId());\r\n        ResultSet rs = callableStatement.executeQuery();\r\n\r\n        //loop through the resultSet & add each room type to the ArrayList\r\n        while (rs.next()) {\r\n            roomsTypes.add(new Room(rs.getString(\"type_name\")));\r\n            System.out.println(rs.getString(\"room_type_desc\"));\r\n        }\r\n        return roomsTypes;\r\n    }\r\n\r\n    /****************************************************************************************************************\r\n     *                                      roomChange method\r\n     * @param event - used to see whether remove or add button was pressed\r\n     * - checks which button was pressed, finds the room in the roomTypes list and then calls cartHandler()\r\n     *   to handle the add or remove from cart depending on the second parameter being ADDTOCART or REMOVEFROMCART\r\n     ****************************************************************************************************************/\r\n    @FXML void roomChange(ActionEvent event) {\r\n        Stage stage = (Stage) anchorPane.getScene().getWindow(); // for displaying Toast error messages\r\n        String choice;\r\n\r\n        choice = roomCB.getValue();\r\n        if(choice == null){\r\n            Toast.makeText(stage, \"Error: no room selected\", 2000, 500, 500);\r\n            return;\r\n        }\r\n\r\n        // find the room type in the list to be decremented\r\n        for(int i = 0; i < roomTypes.size(); i++) {\r\n            if(roomTypes.get(i).getType().equals(choice)) {\r\n                if(event.getSource() == addRoomBtn) {\r\n                    cartHandler(roomTypes.get(i), ADDTOCART);\r\n                } else {\r\n                    cartHandler(roomTypes.get(i), REMOVEFROMCART);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /****************************************************************************************************************\r\n     *                                          cartHandler method\r\n     * @param room - room that user selected used to identify room type in cart\r\n     * @param action - key used to determine whether user adding or removing from cart\r\n     * - if user adding to cart this method adds a new room or increments it if it already exists in cart table\r\n     * - else the user is removing a room from the cart and the method decrements that room in the cart table\r\n     ****************************************************************************************************************/\r\n    private void cartHandler(Room room, String action) {\r\n        boolean exists = false;\r\n\r\n        if(action.equals(REMOVEFROMCART)){\r\n            for(int i = 0; i < cartList.size(); i++) {\r\n                if(room.getType().equals(cartList.get(i).getType())) {\r\n                    exists = true;\r\n                    cartList.get(i).setAmountAvailable(cartList.get(i).getAmountAvailable() - 1);\r\n                    cartList.get(i).setPrice(cartList.get(i).getPrice() - room.getPrice());\r\n                    if(cartList.get(i).getAmountAvailable() == 0) {\r\n                        cartList.remove(cartList.get(i));\r\n                    }\r\n                }\r\n            }\r\n            if(!exists){\r\n                Stage stage = (Stage) anchorPane.getScene().getWindow(); // for displaying Toast error messages\r\n                Toast.makeText(stage, \"Error: there is no \" + room.getType() + \" room in your cart\", 2000, 500, 500);\r\n                return;\r\n            }\r\n            roomsHandler(room, REMOVEFROMCART);\r\n        } else {\r\n            if(roomsHandler(room, ADDTOCART) == ERROR){\r\n                System.out.println(\"ERROR adding item to cart\");\r\n                return;\r\n            } else {\r\n                for(int i = 0; i < cartList.size(); i++) {\r\n                    if(room.getType().equals(cartList.get(i).getType())) {\r\n                        cartList.get(i).setAmountAvailable(cartList.get(i).getAmountAvailable() + 1);\r\n                        cartList.get(i).setPrice(cartList.get(i).getPrice() + room.getPrice());\r\n                        exists = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if(!exists) {\r\n                    Room r = new Room(room.getPrice(), room.getType(), 1);\r\n                    cartList.add(r);\r\n                }\r\n            }\r\n        }\r\n        cartTV.refresh();\r\n    }\r\n\r\n    /****************************************************************************************************************\r\n     *                                      roomsHandler method\r\n     * @param room - room that user selected used to identify room type in rooms table\r\n     * @param action - key used to determine whether user adding or removing from cart\r\n     * - if user adding to cart this method decrements the availability of the specified room type from the rooms table\r\n     * - else the user is removing a room from the cart and the method increments that room in the rooms table\r\n     ****************************************************************************************************************/\r\n    private int roomsHandler(Room room, String action) {\r\n\r\n        if(action.equals(ADDTOCART)){\r\n            for(int i = 0; i < roomTypes.size(); i++){\r\n                if(room.getType().equals(roomTypes.get(i).getType())) {\r\n                    if(roomTypes.get(i).getAmountAvailable() == 0) {\r\n                        Stage stage = (Stage) anchorPane.getScene().getWindow(); // for displaying Toast error messages\r\n                        Toast.makeText(stage, \"Error: there are no more \" + room.getType() + \" rooms available\", 2000, 500, 500);\r\n                        return ERROR;\r\n                    }\r\n                    roomTypes.get(i).setAmountAvailable(roomTypes.get(i).getAmountAvailable() - 1);\r\n                    roomTV.refresh();\r\n                    return SUCCESS;\r\n                }\r\n            }\r\n        } else {\r\n            for (int i = 0; i < roomTypes.size(); i++) {\r\n                if (room.getType().equals(roomTypes.get(i).getType())) {\r\n                    roomTypes.get(i).setAmountAvailable(roomTypes.get(i).getAmountAvailable() + 1);\r\n                    roomTV.refresh();\r\n                    return SUCCESS;\r\n                }\r\n            }\r\n        }\r\n        return ERROR;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/Controllers/SharedBooking.java b/src/main/Controllers/SharedBooking.java
--- a/src/main/Controllers/SharedBooking.java	(revision d77243c6bccc5d711fc794c98aab4ac041192248)
+++ b/src/main/Controllers/SharedBooking.java	(date 1637984219959)
@@ -160,11 +160,7 @@
             Connection con = null;
             con = getConnection();
 
-            if(LoadedUser.getInstance().getUser().getType().toString().equals("EMP"))
-            {
-                System.out.println("USER IS A EMPLOYEE WHO IS MAKING THIS RESERVATION");
 
-            }
 
             System.out.println(hotel.getHotelId());//HOTEL_ID
             System.out.println(checkInDP.getValue().toString());
@@ -172,22 +168,36 @@
             System.out.println(adultS.getValue().toString());//Adults
             System.out.println(childrenS.getValue().toString());//Children
             //CreateNewUser`(NEW_EMAIL VARCHAR(40), NEW_HASHED_PASSWORD CHAR(40), FNAME VARCHAR(40), USERTYPE VARCHAR(45))
-            CallableStatement CreateNew = con.prepareCall("{call hotel.CreateNewUser(?,?,?,?)}");
-            String TempPW = Hasher.getInstance("SHA-256").hash(emailTF.getText());
-            CreateNew.setString(1, emailTF.getText().toString());
-            CreateNew.setString(2,TempPW);
-            CreateNew.setString(3,nameTF.getText().toString());
-            CreateNew.setString(4,"CUST"); //<-will always be a customer from this scene
-            CreateNew.execute();
+            if(LoadedUser.getInstance().getUser().getType().toString().equals("EMP"))
+            {
+                System.out.println("USER IS A EMPLOYEE WHO IS MAKING THIS RESERVATION");
+                CallableStatement CreateNew = con.prepareCall("{call hotel.CreateNewUser(?,?,?,?)}");
+                String TempPW = Hasher.getInstance("SHA-256").hash(emailTF.getText());
+                CreateNew.setString(1, emailTF.getText().toString());
+                CreateNew.setString(2,TempPW);
+                CreateNew.setString(3,nameTF.getText().toString());
+                CreateNew.setString(4,"CUST"); //<-will always be a customer from this scene
+                CreateNew.execute();
 
-
-            CallableStatement callableStatement = con.prepareCall("{call hotel.getID(?,?)}");
-            callableStatement.setString(1,nameTF.getText().toString());
-            callableStatement.setString(2,"CUST");
-            ResultSet rs = callableStatement.executeQuery();
-            while(rs.next()){
-                userID = rs.getInt("ID");
+                CallableStatement callableStatement = con.prepareCall("{call hotel.getID(?,?)}");
+                callableStatement.setString(1,nameTF.getText().toString());
+                callableStatement.setString(2,"CUST");
+                ResultSet rs = callableStatement.executeQuery();
+                while(rs.next()){
+                    userID = rs.getInt("ID");
+                }
+            }else{
+                CallableStatement callableStatement = con.prepareCall("{call hotel.getID(?,?)}");
+                callableStatement.setString(1,LoadedUser.getInstance().getUser().getFirstName().toString());
+                callableStatement.setString(2,"CUST");
+                ResultSet rs = callableStatement.executeQuery();
+                while(rs.next()){
+                    userID = rs.getInt("ID");
+                }
             }
+
+
+
 
 
             System.out.println(userID);//custID
